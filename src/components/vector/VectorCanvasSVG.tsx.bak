'use client';

import React, { useEffect, useRef, useState, useCallback } from 'react';
import { useVectorStore } from '@/lib/store';
import { AspectRatio, VectorItem } from '@/lib/types';
import Victor from 'victor';

// Extender la interfaz VectorItem para nuestras necesidades
interface ExtendedVectorItem extends VectorItem {
  targetAngle?: number; // Para animaciones suaves
  layer: number; // Capa del vector
  activationTime: number; // Tiempo de activación
}

/**
 * VectorCanvasSVG - Componente que renderiza vectores animados usando SVG nativo
 * con Victor.js para cálculos matemáticos vectoriales
 */
export function VectorCanvasSVG() {
  // Referencias para el contenedor SVG
  const svgRef = useRef<SVGSVGElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const animationFrameIdRef = useRef<number | null>(null);
  
  // Estados locales
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });
  const [vectorGrid, setVectorGrid] = useState<ExtendedVectorItem[]>([]);
  
  // Acceder al store global
  const { 
    settings, 
    isPaused, 
    setSettings,
    setCalculatedValues,
    setSvgLines 
  } = useVectorStore();
  
  // Mantener una referencia actualizada de la configuración para evitar cierres léxicos
  const currentSettingsRef = useRef(settings);
  
  // Actualizar la referencia cuando cambien los settings
  useEffect(() => {
    currentSettingsRef.current = settings;
  }, [settings]);

  // Inicializar el grid de vectores
  const initializeVectorGrid = useCallback(() => {
    if (!svgRef.current || dimensions.width === 0 || dimensions.height === 0) return;
    
    const { vectorSpacing } = currentSettingsRef.current;
    
    // Calcular número de filas y columnas basado en el espacio disponible
    const gridRows = settings.gridRows;
    const gridCols = Math.floor(dimensions.width / vectorSpacing);
    
    // Actualizar valores calculados en el store
    setCalculatedValues(gridCols, dimensions.width, dimensions.height);
    
    // Crear un array de vectores con posiciones iniciales
    const vectors: ExtendedVectorItem[] = [];
    
    for (let r = 0; r < gridRows; r++) {
      for (let c = 0; c < gridCols; c++) {
        // Posición base del vector (centro)
        const baseX = c * vectorSpacing + vectorSpacing / 2;
        const baseY = r * vectorSpacing + vectorSpacing / 2;
        
        // Ángulo inicial (puede ser aleatorio o fijo según se requiera)
        const currentAngle = Math.random() * 360;
        
        vectors.push({
          id: `vector-${r}-${c}`,
          r, // Fila
          c, // Columna
          baseX, // Posición X base
          baseY, // Posición Y base
          currentAngle,
          targetAngle: currentAngle, // Para animaciones suaves
          shape: settings.vectorShape, // Forma del vector
          flockId: Math.floor(Math.random() * 5), // Assign a random flock ID (0-4)
          layer: 0, // Default layer
          activationTime: 0, // Default activation time
        });
      }
    }
    
    // Actualizar estado local y global
    setVectorGrid(vectors);
    setSvgLines(vectors);
    
  }, [dimensions, setCalculatedValues, setSvgLines, settings.gridRows, settings.vectorShape, settings.vectorSpacing]);

  // Animación de ondas suaves
  const updateSmoothWavesAnimation = useCallback((vectors: ExtendedVectorItem[], time: number) => {
    const { 
      animationSpeedFactor, 
      easingFactor,
      seaWaveFrequency
    } = currentSettingsRef.current;
    
    const timeOffset = time * 0.001 * animationSpeedFactor;
    
    vectors.forEach(vector => {
      // Crear patrón de ondas usando seno y coseno
      const xFactor = vector.baseX / dimensions.width;
      const yFactor = vector.baseY / dimensions.height;
      
      // Crear ondas complejas superponiendo varias funciones sinusoidales
      const waveX = Math.sin(timeOffset + xFactor * seaWaveFrequency);
      const waveY = Math.cos(timeOffset * 0.7 + yFactor * seaWaveFrequency);
      
      // Calcular ángulo objetivo basado en las ondas
      const targetAngle = Math.atan2(waveY, waveX);
      
      // Aplicar suavizado para transiciones fluidas
      if (vector.targetAngle === undefined) {
        vector.targetAngle = targetAngle;
      } else {
        // Interpolar suavemente hacia el ángulo objetivo
        const angleDiff = targetAngle - vector.currentAngle;
        
        // Normalizar la diferencia para manejar el cruce de -PI a PI
        let normalizedDiff = angleDiff;
        if (angleDiff > Math.PI) normalizedDiff -= 2 * Math.PI;
        if (angleDiff < -Math.PI) normalizedDiff += 2 * Math.PI;
        
        // Aplicar easing
        vector.currentAngle += normalizedDiff * easingFactor;
        vector.targetAngle = targetAngle;
      }
    });
  }, [dimensions.width, dimensions.height]);

  // Animación de remolino (vortex)
  const updateVortexAnimation = useCallback((vectors: ExtendedVectorItem[], time: number) => {
    const { 
      animationSpeedFactor, 
      easingFactor,
      vortexInwardFactor
    } = currentSettingsRef.current;
    
    // Calcular el centro del canvas
    const centerX = dimensions.width / 2;
    const centerY = dimensions.height / 2;
    
    const timeOffset = time * 0.001 * animationSpeedFactor;
    
    vectors.forEach(vector => {
      // Vector desde el centro hacia el punto
      const dx = vector.baseX - centerX;
      const dy = vector.baseY - centerY;
      
      // Calcular ángulo hacia el centro o tangencial
      let angle = Math.atan2(dy, dx);
      
      // Añadir componente rotacional que varía con el tiempo
      const rotationOffset = timeOffset * (1 - vortexInwardFactor);
      
      // Mezclar componente inward y rotacional
      angle = angle + Math.PI/2 + rotationOffset;
      
      // Aplicar suavizado para transiciones fluidas
      if (vector.targetAngle === undefined) {
        vector.targetAngle = angle;
      } else {
        // Interpolar suavemente hacia el ángulo objetivo
        const angleDiff = angle - vector.currentAngle;
        
        // Normalizar la diferencia para manejar el cruce de -PI a PI
        let normalizedDiff = angleDiff;
        if (angleDiff > Math.PI) normalizedDiff -= 2 * Math.PI;
        if (angleDiff < -Math.PI) normalizedDiff += 2 * Math.PI;
        
        // Aplicar easing
        vector.currentAngle += normalizedDiff * easingFactor;
        vector.targetAngle = angle;
      }
    });
  }, [dimensions.width, dimensions.height]);

  // Animación de olas marinas
  const updateSeaWavesAnimation = useCallback((vectors: ExtendedVectorItem[], time: number) => {
    const { 
      animationSpeedFactor, 
      easingFactor,
      seaWaveAmplitude,
      seaWaveFrequency
    } = currentSettingsRef.current;
    
    const timeOffset = time * 0.001 * animationSpeedFactor;
    
    vectors.forEach(vector => {
      // Olas que se mueven de izquierda a derecha
      const xPosition = vector.baseX / dimensions.width;
      const yPosition = vector.baseY / dimensions.height;
      
      // Calcular ola
      const wavePhase = (xPosition * seaWaveFrequency) + timeOffset;
      // Modulación de amplitud a lo largo del eje Y
      const amplitudeModulation = (Math.sin(yPosition * Math.PI) * 0.5) + 0.5;
      const angle = Math.sin(wavePhase) * (seaWaveAmplitude * (Math.PI / 180)) * amplitudeModulation;
      
      // Aplicar suavizado
      if (vector.targetAngle === undefined) {
        vector.targetAngle = angle;
        vector.currentAngle = angle;
      } else {
        vector.targetAngle = angle;
        const diff = vector.targetAngle - vector.currentAngle;
        vector.currentAngle += diff * easingFactor;
      }
    });
  }, [dimensions.width, dimensions.height]);

  // Actualizar animación según el tipo activo
  const updateAnimation = useCallback((time: number) => {
    const { currentAnimationType } = currentSettingsRef.current;
    const localVectorGrid = [...vectorGrid];
    
    switch (currentAnimationType) {
      case 'smoothWaves':
        updateSmoothWavesAnimation(localVectorGrid, time);
        break;
      case 'vortex':
        updateVortexAnimation(localVectorGrid, time);
        break;
      case 'seaWaves':
        updateSeaWavesAnimation(localVectorGrid, time);
        break;
      // Otras animaciones pueden ser agregadas aquí
      default:
        break;
    }
    
    // Actualizar estado
    setVectorGrid(localVectorGrid);
  }, [updateSmoothWavesAnimation, updateVortexAnimation, updateSeaWavesAnimation, vectorGrid]);

  // Función principal de animación
  const animate = useCallback((time: number) => {
    if (!isPaused) {
      updateAnimation(time);
    }
    animationFrameIdRef.current = requestAnimationFrame(animate);
  }, [isPaused, updateAnimation]);

  // Iniciar/detener animación según estado de pausa
  useEffect(() => {
    if (isPaused) {
      if (animationFrameIdRef.current) {
        cancelAnimationFrame(animationFrameIdRef.current);
        animationFrameIdRef.current = null;
      }
    } else {
      if (!animationFrameIdRef.current) {
        animationFrameIdRef.current = requestAnimationFrame(animate);
      }
    }
    
    return () => {
      if (animationFrameIdRef.current) {
        cancelAnimationFrame(animationFrameIdRef.current);
        animationFrameIdRef.current = null;
      }
    };
  }, [isPaused, animate]);
  
  // Renderizar/actualizar grid según cambios en dimensiones o configuración
  useEffect(() => {
    initializeVectorGrid();
  }, [dimensions, settings.gridRows, settings.vectorSpacing, initializeVectorGrid]);
  
  // Observar cambios en dimensiones del contenedor
  useEffect(() => {
    const container = containerRef.current;
    if (!container) return;
    
    const updateDimensions = () => {
      if (container) {
        const { offsetWidth, offsetHeight } = container;
        setDimensions({
          width: offsetWidth,
          height: offsetHeight
        });
      }
    };
    
    // Ejecutar una vez al inicio
    updateDimensions();
    
    // Configurar observador de cambio de tamaño
    const resizeObserver = new ResizeObserver(updateDimensions);
    resizeObserver.observe(container);
    
    return () => {
      if (container) {
        resizeObserver.unobserve(container);
      }
    };
  }, []);

  // Renderizar un vector individual
  const renderVector = (vector: ExtendedVectorItem) => {
    const {
      vectorLength,
      vectorStrokeWidth,
      vectorLineCap,
      vectorColor,
      vectorShape
    } = settings;
    
    // Calcular posiciones
    const { baseX, baseY, currentAngle } = vector;
    
    // Calcular punto final usando Victor.js
    const endVector = new Victor(
      vectorLength * Math.cos(currentAngle),
      vectorLength * Math.sin(currentAngle)
    );
    
    const endX = baseX + endVector.x;
    const endY = baseY + endVector.y;
    
    // Atributos comunes para todos los tipos
    const baseProps = {
      id: `vector-${vector.r}-${vector.c}`,
      stroke: vectorColor,
      strokeWidth: vectorStrokeWidth,
      strokeLinecap: vectorLineCap as React.SVGAttributes<SVGElement>['strokeLinecap'],
    };
    const key = `vector-${vector.r}-${vector.c}`;
    
    // Renderizar según la forma
    switch (vectorShape) {
      case 'curved': {
        // Calcular punto de control para curva
        const controlVector = new Victor(
          Math.cos(currentAngle + Math.PI/2) * (vectorLength * 0.3),
          Math.sin(currentAngle + Math.PI/2) * (vectorLength * 0.3)
        );
        
        const controlX = (baseX + endX) / 2 + controlVector.x;
        const controlY = (baseY + endY) / 2 + controlVector.y;
        
        // Path para curva cuadrática
        const pathData = `M ${baseX} ${baseY} Q ${controlX} ${controlY}, ${endX} ${endY}`;
        
        return <path key={key} {...baseProps} d={pathData} fill="none" />;
      }
      
      case 'semicircle': {
        // Calcular punto medio y radio
        const middleX = (baseX + endX) / 2;
        const middleY = (baseY + endY) / 2;
        const radius = vectorLength / 2;
        
        // Ángulo para el punto final
        const angle = currentAngle;
        const startAngle = angle - Math.PI/2;
        const endAngle = angle + Math.PI/2;
        
        // Calcular puntos para el arco
        const x1 = middleX + radius * Math.cos(startAngle);
        const y1 = middleY + radius * Math.sin(startAngle);
        const x2 = middleX + radius * Math.cos(endAngle);
        const y2 = middleY + radius * Math.sin(endAngle);
        
        // Determinar dirección del arco
        const largeArcFlag = 0; // Siempre es un arco pequeño (semicírculo)
        const sweepFlag = 1;    // Dirección del arco
        
        // Path para arco
        const pathData = `M ${x1} ${y1} A ${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${x2} ${y2}`;
        
        return <path key={key} {...baseProps} d={pathData} fill="none" />;
      }
      
      case 'straight':
      default:
        // Línea recta
        return <line key={key} {...baseProps} x1={baseX} y1={baseY} x2={endX} y2={endY} />;
    }
  }
  
  // Obtener clases de contenedor según las proporciones
  const getContainerClasses = () => {
    switch (settings.aspectRatio) {
      case '1:1':
        return "md:w-[600px] md:h-[600px] w-[min(600px,95vw)] h-[min(600px,95vw)]";
      case '2:1':
        return "md:w-[1200px] md:h-[600px] w-[min(1200px,95vw)] h-[min(600px,47.5vw)]";
      default: // 16:9
        return "md:w-[1200px] md:h-[675px] w-[min(1200px,95vw)] h-[min(675px,53.9vw)]";
    }
  };

  // Manejar el cambio de relación de aspecto
  const handleAspectRatioChange = (newAspectRatio: AspectRatio) => {
    setSettings({
      aspectRatio: newAspectRatio
    });
  };

  // Opciones de relación de aspecto
  const aspectRatioOptions = [
    { value: '1:1', label: 'Cuadrado (1:1)' },
    { value: '2:1', label: 'Panorámico (2:1)' },
    { value: '16:9', label: 'Estándar (16:9)' }
  ];

  return (
    <div className="flex flex-col items-center">
      <div 
        ref={containerRef}
        className={getContainerClasses()} 
        style={{position: 'relative', overflow: 'hidden', background: '#000'}}
      >
        <svg 
          ref={svgRef}
          width="100%" 
          height="100%" 
          style={{display: 'block'}}
        >
          {/* Renderizar cada vector */}
          {vectorGrid.map(vector => renderVector(vector))}
        </svg>
      </div>
      
      {/* Botones de relación de aspecto en la parte inferior */}
      <div className="mt-4 flex flex-wrap gap-2 justify-center">
        {aspectRatioOptions.map(option => (
          <button
            key={option.value}
            className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
              settings.aspectRatio === option.value 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-200 hover:bg-gray-300 text-gray-800'
            }`}
            onClick={() => handleAspectRatioChange(option.value as AspectRatio)}
          >
            {option.label}
          </button>
        ))}
      </div>
    </div>
  );
}
